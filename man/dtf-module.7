.\" generated with Ronn/v0.7.3
.\" http://github.com/rtomayko/ronn/tree/0.7.3
.
.TH "DTF\-MODULE" "7" "January 2017" "dtf-1.3-1.dev" "dtf Manual"
.
.SH "NAME"
\fBdtf\-module\fR \- dtf module documentation
.
.SH "DESCRIPTION"
A dtf\-module(7) can be either a python class or shell script\. A module performs a single task or mulitple tasks\. A dtf\-module(7) can import a dtf\-library(7), and can execute a dtf\-binary(7)\.
.
.SH "PYTHON MODULES"
Python modules must extend the \fBdtf\.Module\fR class, where the class name is the same as the file name\. The entry point to a dtf\-module(7) is the \fBexecute(self, args)\fR method, and must be implemented\. Python modules can take advantage of a dtf\-library(7) using \fBimport\fR\. Python modules also use functionality exposed by \fBdtf\.*\fR\. The use of \fBdtf\.core\.*\fR classes are strongly discouraged\.
.
.SH "BASH MODULES"
Bash modules do not contain nearly as much functionality as a python\-based dtf\-module(7)\. A bash dtf\-module(7) is designed to perform symbol tasks or for prototyping\. Bash modules must have a supporte d shebang, starting in "#!" and ending with "sh", such as "#!/usr/bin/ksh"\. Bash modules can source API\'s from the \fBDTF_CORE\fR and \fBDTF_LOG\fR environment variables as follows:
.
.IP "" 4
.
.nf

\e\. $DTF_CORE
\e\. $DTF_LOG
.
.fi
.
.IP "" 0
.
.SH "MODULE PROPERTIES"
Each module can be installed with dtf\-pm(1), or tested/executed locally from a project\'s \fIlocal_modules\fR directory with dtf\-local(1)\. dtf\-pm(1) supports installing packages with metadata\. The following metadata fields are supported (Python|Bash):
.
.IP "" 4
.
.nf

about|About = A one sentence description of the module\.
author|Author = The author of the module\.
health|Health = One of the following\.
name|N/A = The name of the module (should match name of class\.
version|Version \- The version of the module, in semantic version format\.
.
.fi
.
.IP "" 0
.
.P
Python modules can also take advantage of the following properties (no Bash support):
.
.IP "" 4
.
.nf

min_sdk = The minimum required SDK\.
requires = A list of command\-line utilities required\.
.
.fi
.
.IP "" 0
.
.SH "PYTHON EXAMPLE"
A trival python dtf\-module(7) example called newmodule is:
.
.IP "" 4
.
.nf

from dtf\.module import Module

class newmodule(Module):

    about = "A new, fun module"
    author = "Some Hacker (mygithub)"
    health = "stable"
    name = "newmodule"
    version = "1\.3"

    def execute(self, args):

        print "Hello, world!"
.
.fi
.
.IP "" 0
.
.SH "BASH EXAMPLE"
A trival bash dtf\-module(7) example called newmodule is:
.
.IP "" 4
.
.nf

#!/usr/bin/bash

\e\. $DTF_CORE
\e\. $DTF_LOG

log_i "Hello world!"`
.
.fi
.
.IP "" 0
.
.SH "MODULE HEALTH"
.
.nf

stable \- Fully working\.
working \- Mostly working, some features may not be implemented\.
beta \- Currently being developed\.
deprecated \- Contains errors and use is discouraged\.
broken \- Contains known errors and use is strongly discouraged\.
.
.fi
.
.SH "AUTHOR"
Jake Valletta \fIjavallet@gmail\.com\fR
.
.SH "DTF"
Part of the dtf(1) suite\.
.
.SH "SEE ALSO"
dtf\-pm(1), dtf\-local(1), dtf\-binary(7), dtf\-library(7), dtf\-package(7)
