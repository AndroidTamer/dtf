buildscript {
  repositories {
    maven {
      url "https://plugins.gradle.org/m2/"
    }
  }
  dependencies {
    classpath "gradle.plugin.com.netflix.nebula:gradle-ospackage-plugin:3.6.1"
  }
}

apply plugin: "nebula.ospackage"

// Populate version information
String versionContents = new File("VERSION").text.trim()
def values = versionContents.split('-')

project.ext.set("buildVersion", values[0])
project.ext.set("buildRelease", values[1])

if ( values.length == 3) {
    project.ext.set("buildBranch", values[2])
} else {
    project.ext.set("buildBranch", "")
}

task makeDeb(type:Deb) {

    packageName = 'android-dtf'
    version = project.buildVersion
    release = project.buildRelease
    maintainer = 'Jake Valletta <javallet@gmail.com>'
    url = 'https://github.com/jakev/dtf'
    summary = 'Android Device Testing Framework (dtf)'
    packageDescription = 'Module framework for discovering vulnerabilities on Android devices.'
    packageGroup = 'main'

    configurationFile('/etc/bash_completion.d/dtf.bash')

    requires('python')
    requires('python-lxml')
    requires('xz-utils')
    requires('sqlite3')

    into 'build/'

    /* Library Files */
    from('python-dtf/build/usr/local/lib') {
        createDirectoryEntry = true
        fileMode 0644
        into '/usr/local/lib'
    }

    /* Launcher */
    from('python-dtf/build/usr/local/bin') {
        createDirectoryEntry = true
        fileMode 0755
        into '/usr/local/bin'
    }

    /* Bash Completition */
    from('python-dtf/build/etc') {
        createDirectoryEntry = true
        fileType CONFIG
        fileMode 0644
        into '/etc'
    }
}

// Run all tests
task doPythonTests() {}

// Build Python files
task buildPython(type:Exec) {

    workingDir 'python-dtf'

    commandLine 'python', 'setup.py', 'bdist_dumb'
}

// Task to generate documentation
task genDocs(type:Exec) {

    mkdir('python-dtf/api-docs')

    workingDir 'python-dtf/api-docs'

    commandLine 'bash', '-c', 'pydoc -w ../dtf/*.py'
}

// Flake8 the Code
task doFlake(type:Exec) {

    workingDir 'python-dtf'

    commandLine 'flake8', './dtf'
}

// pylint the Code
task doLint(type:Exec) {

    workingDir 'python-dtf'

    commandLine 'pylint', './dtf', '--rcfile=./pylint.config'
}

// Run checkbashisms
task doCheckBashisms(type:Exec) {

    workingDir 'python-dtf/included'

    commandLine 'bash', '-c', 'checkbashisms -f ./*.sh'
}

task deleteIncludedTar(type:Delete) {

    delete 'python-dtf/dtf/included.tar'
}

// Create TAR bundle of included
task tarIncluded(type:Tar) {

    from ('python-dtf/included/')
    include '**/*'
    into ''
    archiveName 'included.tar'
    destinationDir file('python-dtf/dtf/')
}

// Copy version file
task copyVersion(type:Copy) {

    from('.')
    into 'python-dtf/dtf/'
    include('VERSION')
}

// Clean up
clean {

    delete 'build'
    delete 'python-dtf/build'
    delete 'python-dtf/dist'
    delete "python-dtf/dtf.egg-info"
    delete 'python-dtf/api-docs'
    delete 'python-dtf/dtf/included.tar'
    delete 'python-dtf/dtf/VERSION'
}

// doTests will make sure the code passes all tests
doPythonTests.dependsOn doLint
doPythonTests.dependsOn doFlake

// Prepare the python code
buildPython.dependsOn doPythonTests
buildPython.dependsOn tarIncluded
buildPython.dependsOn copyVersion

// Documentation requires valid Python
genDocs.dependsOn buildPython

// Bundling
tarIncluded.dependsOn deleteIncludedTar
tarIncluded.dependsOn doCheckBashisms

// Building Debian
build.dependsOn makeDeb
makeDeb.dependsOn buildPython
