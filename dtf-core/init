#!/usr/bin/env bash
# Android Device Testing Framework ("dtf")
# Copyright 2013-2014 Jake Valletta (@jake_valletta)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# DTF Initialization script. 
. dtf_log.sh

# Override printing to stdout
LOG_TO_STDOUT=0

abort()
{
    echo "Exiting DTF initialization!!" 1>&2
    rm .dtfini 2> /dev/null
    exit -4
}

echo "Initializing dtf directory..."

log_i "Project initialization started."

if [ -e .dtfini ]; then
    echo "[ERROR] Configuration already exists!"
    log_e "Project configuration already exists, failing."
    exit -1
fi

# DTF is going to try to help us setting a serial, but it doesnt exist yet (which breaks the adb wait).
# We're going to blow it away for now. 
unset ANDROID_SERIAL

# Sometimes there are errors, and we need to bail.  We'll remove the (protentially) incomplete .dtfini.
trap abort 1 2 15

echo -n "Please connect the test device, and only the test device (press any key to continue) "
read _

echo "Restarting ADB..."
adb kill-server && adb start-server > /dev/null

echo "Waiting for a device to be connected..."
adb wait-for-device

serial=$(adb devices | grep -E "device$" |awk '{print $1}')

echo -n "Got serial ${serial}, is this correct? [Y/n] "
read res

if [ "$res" = "n" ]; then
   echo "Bailing!"
   exit -4
fi

touch .dtfini

ANDROID_SERIAL=$serial

dtf prop set Info serial "${serial}"

# Get the kernel
kernel=$(adb shell "cat /proc/version")

dtf prop set Info kernel "${kernel}"

# Get the SDK version
sdk=$(adb shell getprop ro.build.version.sdk|sed 's/\r//')

dtf prop set Info SDK "${sdk}"

# Set path
path=$(adb shell set |grep -E "^PATH" | sed 's/^PATH\=//g')
dtf prop set Info path "${path}"

# Set bootclasspath
bcp=$(adb shell set |grep -E "^BOOTCLASSPATH" | sed 's/^BOOTCLASSPATH\=//g')
dtf prop set Info bootclasspath-jars "${bcp}"

# Get versioning info.
brand=$(adb shell getprop ro.product.brand|sed 's/\r//')
name=$(adb shell getprop ro.product.name|sed 's/\r//')
version=$(adb shell getprop ro.build.id|sed 's/\r//')
version_string=${brand}-${name}_${version}

echo "dtf would like to use following version string:"
echo ""
echo $version_string
echo ""
echo -n "Would you like to change it? [N/y] "

read res

if [ "$res" == "y" -o "$res" == "Y" ]; then
    echo -n "Please enter a custom version string: "
    read version
    echo "Using version string '${version}'..."
    dtf prop set Info version-string "${version}"
else
   dtf prop set Info version-string "${version_string}"
fi


# Getting the VM type doesn't seem consistent.

# ART was introduced in KitKat, so if we're less than that, Dalvik.
if [ $sdk -lt 20 ]; then
    vmtype="Dalvik"

# If there is a single "persist.sys.dalvik.vm.lib", use it!
elif [ $(adb shell getprop |grep persist.sys.dalvik.vm.lib|sed 's/\r//'|wc -l) = 1 ]; then

    if [ "$(adb shell getprop |grep persist.sys.dalvik.vm.lib|sed 's/\r//'|awk '{print $2}')" = "[libart.so]" ]; then
        vmtype="ART"
    else
        vmtype="Dalvik"
    fi

# There are two values.  Check for the "arm" directory in frameworks. [HACK]
else
    if [[ "$(adb shell ls /system/framework/arm|sed 's/\r//')" =~ "No such file or directory" ]]; then
        vmtype="Dalvik"
    else
        vmtype="ART"
    fi
fi

echo "Using VM Type of '${vmtype}'"
dtf prop set Info vmtype "${vmtype}"

# Set the "Local variables"
mkdir reports 2>/dev/null
mkdir .dbs 2>/dev/null
mkdir local_modules 2>/dev/null

dtf prop set Local reports-dir "reports"
dtf prop set Local db-dir ".dbs"

# Install the DTF Client. It's really lightweight.
dtf client install

log_i "Project initialization complete!"
